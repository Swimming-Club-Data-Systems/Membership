const path = require('path');
const fs = require('fs');
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const postcssPresetEnv = require('postcss-preset-env');

// const ExtractTextPlugin = require('extract-text-webpack-plugin');

const compileTime = Date.now();

var CASHBUSTER_FILE = './cachebuster.json';


// Function that extracts unique hash generated by webpack
// and writes it into a file. It also performs a check
// whether cachebuster.json existed before and if so,
// replaces the hash value. Otherwise writes a new file.
function generateResourcesHash(hash) {
  if (!fs.existsSync(CASHBUSTER_FILE)) {
    fs.openSync(CASHBUSTER_FILE, 'w');
    fs.writeFileSync(
      path.join(__dirname, "", CASHBUSTER_FILE),
      "{}"
    );
  }

  var cacheBuster = JSON.parse(fs.readFileSync(path.join(__dirname, CASHBUSTER_FILE), 'utf8'));

  cacheBuster.resourcesHash = hash

  fs.writeFileSync(
    path.join(__dirname, "", CASHBUSTER_FILE),
    JSON.stringify(cacheBuster)
  );
}

generateResourcesHash(compileTime);

module.exports = (env, options) => {
  var inProduction = options.mode === 'production';

  return {
    mode: options.mode,
    devtool: 'source-map',
    entry: {
      'main': './js/javascript.js',
      // 'clse': './scss/clse.scss',
      'generic': './scss/generic.scss',
      'generic-dark-mode': './scss/generic-dark-mode.scss',
      'scds': './scss/scds.scss',
      'scds-dark-mode': './scss/scds-dark-mode.scss'
    },
    output: {
      path: path.resolve(__dirname, 'public/compiled/'),
      filename: 'js/[name].[contenthash].js'
    },
    module: {
      rules: [
        {
          test: /\.m?js$/,
          exclude: /node_modules/,
          use: {
            loader: "babel-loader",
            options: {
              presets: ['@babel/preset-env']
            }
          }
        },
        {
          test: /\.(scss)$/,
          use: [
            MiniCssExtractPlugin.loader,
            {
              // translates CSS into CommonJS modules
              loader: 'css-loader',
              options: {
                url: false,
              }
            }, {
              // Run postcss actions
              loader: 'postcss-loader',
              options: {
                postcssOptions: {
                  plugins: [
                    [
                      "postcss-preset-env",
                      {
                        // Options
                      },
                    ],
                  ],
                  // url: false,
                  parser: null,
                },
              }
            }, {
              // compiles Sass to CSS
              loader: 'sass-loader',
              options: {
                // Prefer `dart-sass`
                implementation: require("sass"),
              },
            }]
        },
      ],
    },
    plugins: [
      new CleanWebpackPlugin(),
      new MiniCssExtractPlugin({
        // Options similar to the same options in webpackOptions.output
        // both options are optional
        filename: "css/[name].[contenthash].css",
        chunkFilename: "css/[id].css",
      }),
    ]
  };
};
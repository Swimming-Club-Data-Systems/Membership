{"version":3,"file":"js/968.921fbbc1bab2721e6f9e.js","mappings":"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","sources":["webpack://src/./js/classes/Tenant.js","webpack://src/./js/components/Breadcrumb.js","webpack://src/./js/components/form/Form.js","webpack://src/./js/components/form/TextInput.js","webpack://src/./node_modules/@web-auth/webauthn-helper/src/common.js","webpack://src/./node_modules/@web-auth/webauthn-helper/src/useRegistration.js","webpack://src/./js/my-account/webauthn/WebAuthn.js"],"sourcesContent":["// import reducer from \"../reducers/index\";\n// import { getState } from 'redux';\nimport store from \"../reducers/store\";\n\nexport function getKey(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/GlobalSettings\"][key];\n}\n\nexport function getName() {\n  return getDetail(\"name\");\n}\n\nexport function getId() {\n  return getDetail(\"id\");\n}\n\nexport function getUuid() {\n  return getDetail(\"uuid\");\n}\n\nexport function getWebsite() {\n  return getDetail(\"website\");\n}\n\nexport function getHostname() {\n  return getDetail(\"hostname\");\n}\n\nexport function getCode() {\n  return getDetail(\"swim_england_code\");\n}\n\nexport function isVerified() {\n  return getDetail(\"is_verified\");\n}\n\nexport function getLogoUrl(filename) {\n  return getDetail(\"club_logo_path\") + filename;\n}\n\nfunction getDetail(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/Tenant\"][key];\n}\n\nexport function setTitle(title) {\n  document.title = title + \" - \" + getKey(\"club_name\");\n}","import React from \"react\";\nimport { Link, useMatch, useResolvedPath } from \"react-router-dom\";\n\nconst Breadcrumb = (props) => {\n\n  const crumbs = props.crumbs;\n\n  // let resolved = useResolvedPath(to);\n  // let match = useMatch({ path: resolved.pathname, end: true });\n\n  if (crumbs.length === 0) {\n    // If no links return with nothing\n    return;\n  }\n\n  // members.map((member, idx) => (\n  const breadcrumbs = crumbs.map((crumb) => {\n    let resolved = useResolvedPath(crumb.to);\n    let match = useMatch({ path: resolved.pathname, end: true });\n\n    if (match) {\n      return (\n        <li className=\"breadcrumb-item active\" key={crumb.to} title={crumb.title} aria-current=\"page\">\n          {crumb.name}\n        </li>\n      );\n    } else {\n      return (\n        <li className=\"breadcrumb-item\" key={crumb.to}>\n          <Link to={crumb.to} title={crumb.title} state={{global_questionable_link: true}}>\n            {crumb.name}\n          </Link>\n        </li>\n      );\n    }\n  });\n\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        {breadcrumbs}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;","/**\n * Form component\n */\n\nimport React from \"react\";\nimport { Formik, Form as FormikForm, useFormikContext } from \"formik\";\nimport Button from \"react-bootstrap/Button\";\n\nexport const SubmissionButtons = (props) => {\n\n  const { isSubmitting, dirty, isValid, errors, handleReset } = useFormikContext();\n\n  const clearForm = () => {\n    if (props.onClear) {\n      props.onClear();\n    }\n    handleReset();\n  };\n\n  return (\n    <>\n      {\n        false && errors &&\n        <p className=\"text-end text-danger\">\n          There are <strong>{Object.keys(errors).length} errors</strong>\n        </p>\n      }\n      <div className=\"row\">\n        <div className=\"col-auto ms-auto\">\n          {!props.hideClear &&\n            <>\n              <Button variant=\"secondary\" type=\"button\" onClick={clearForm} disabled={isSubmitting || !dirty}>\n                {props.clearTitle || \"Clear\"}\n              </Button>{\" \"}\n            </>\n          }\n\n          <Button variant=\"primary\" type=\"submit\" disabled={!dirty || !isValid || isSubmitting}>\n            {props.submitTitle || \"Submit\"}\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst Form = (props) => {\n\n  const {\n    initialValues,\n    validationSchema,\n    onSubmit,\n    submitTitle,\n    hideClear,\n    clearTitle,\n    onClear,\n    hideButtons,\n    ...otherProps\n  } = props;\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        <FormikForm {...otherProps}>\n          {props.children}\n\n          {!hideButtons &&\n            <SubmissionButtons\n              submitTitle={submitTitle}\n              hideClear={hideClear}\n              clearTitle={clearTitle}\n              onClear={onClear}\n            />\n          }\n        </FormikForm>\n      </Formik>\n    </>\n  );\n};\n\nexport default Form;","import React from \"react\";\nimport { useField, useFormikContext } from \"formik\";\nimport { Form } from \"react-bootstrap\";\n\nconst TextInput = ({ label, helpText, mb, disabled, ...props }) => {\n\n  const [field, meta] = useField(props);\n  const { isSubmitting } = useFormikContext();\n  const marginBotton = mb || \"mb-3\";\n\n  return (\n    <>\n      <Form.Group className={marginBotton} controlId={props.id || props.name}>\n        <Form.Label>{label}</Form.Label>\n        <Form.Control\n          isValid={meta.touched && !meta.error}\n          isInvalid={meta.touched && meta.error}\n          disabled={isSubmitting || disabled}\n          {...field}\n          {...props}\n        />\n\n        {meta.touched && meta.error ? (\n          <Form.Control.Feedback type=\"invalid\">\n            {meta.error}\n          </Form.Control.Feedback>\n        ) : null}\n\n        {helpText &&\n          <Form.Text className=\"text-muted\">\n            {helpText}\n          </Form.Text>\n        }\n      </Form.Group>\n    </>\n  );\n};\n\nexport default TextInput;","// Predefined fetch function\nexport const fetchEndpoint = (data, url, header) => {\n  return fetch(\n      url,\n      {\n        method: 'POST',\n        credentials: 'same-origin',\n        redirect: 'error',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          ...header\n        },\n        body: JSON.stringify(data),\n      }\n  );\n}\n\n// Decodes a Base64Url string\nconst base64UrlDecode = (input) => {\n  input = input\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n  const pad = input.length % 4;\n  if (pad) {\n    if (pad === 1) {\n      throw new Error('InvalidLengthError: Input base64url string is the wrong length to determine padding');\n    }\n    input += new Array(5-pad).join('=');\n  }\n\n  return window.atob(input);\n};\n\n// Converts an array of bytes into a Base64Url string\nconst arrayToBase64String = (a) => btoa(String.fromCharCode(...a));\n\n// Prepares the public key options object returned by the Webauthn Framework\nexport const preparePublicKeyOptions = publicKey => {\n  //Convert challenge from Base64Url string to Uint8Array\n  publicKey.challenge = Uint8Array.from(\n      base64UrlDecode(publicKey.challenge),\n      c => c.charCodeAt(0)\n  );\n\n  //Convert the user ID from Base64 string to Uint8Array\n  if (publicKey.user !== undefined) {\n    publicKey.user = {\n      ...publicKey.user,\n      id: Uint8Array.from(\n          window.atob(publicKey.user.id),\n          c => c.charCodeAt(0)\n      ),\n    };\n  }\n\n  //If excludeCredentials is defined, we convert all IDs to Uint8Array\n  if (publicKey.excludeCredentials !== undefined) {\n    publicKey.excludeCredentials = publicKey.excludeCredentials.map(\n        data => {\n          return {\n            ...data,\n            id: Uint8Array.from(\n                base64UrlDecode(data.id),\n                c => c.charCodeAt(0)\n            ),\n          };\n        }\n    );\n  }\n\n  if (publicKey.allowCredentials !== undefined) {\n    publicKey.allowCredentials = publicKey.allowCredentials.map(\n        data => {\n          return {\n            ...data,\n            id: Uint8Array.from(\n                base64UrlDecode(data.id),\n                c => c.charCodeAt(0)\n            ),\n          };\n        }\n    );\n  }\n\n  return publicKey;\n};\n\n// Prepares the public key credentials object returned by the authenticator\nexport const preparePublicKeyCredentials = data => {\n  const publicKeyCredential = {\n    id: data.id,\n    type: data.type,\n    rawId: arrayToBase64String(new Uint8Array(data.rawId)),\n    response: {\n      clientDataJSON: arrayToBase64String(\n          new Uint8Array(data.response.clientDataJSON)\n      ),\n    },\n  };\n\n  if (data.response.attestationObject !== undefined) {\n    publicKeyCredential.response.attestationObject = arrayToBase64String(\n        new Uint8Array(data.response.attestationObject)\n    );\n  }\n\n  if (data.response.authenticatorData !== undefined) {\n    publicKeyCredential.response.authenticatorData = arrayToBase64String(\n        new Uint8Array(data.response.authenticatorData)\n    );\n  }\n\n  if (data.response.signature !== undefined) {\n    publicKeyCredential.response.signature = arrayToBase64String(\n        new Uint8Array(data.response.signature)\n    );\n  }\n\n  if (data.response.userHandle !== undefined) {\n    publicKeyCredential.response.userHandle = arrayToBase64String(\n        new Uint8Array(data.response.userHandle)\n    );\n  }\n\n  return publicKeyCredential;\n};\n","import {\n    fetchEndpoint,\n    preparePublicKeyCredentials,\n    preparePublicKeyOptions,\n} from './common';\n\nconst useRegistration = ({actionUrl = '/register', actionHeader = {}, optionsUrl = '/register/options'}, optionsHeader = {}) => {\n    return async (data) => {\n        const optionsResponse = await fetchEndpoint(data, optionsUrl, optionsHeader);\n        const json = await optionsResponse.json();\n        const publicKey = preparePublicKeyOptions(json);\n        const credentials = await navigator.credentials.create({publicKey});\n        const publicKeyCredential = preparePublicKeyCredentials(credentials);\n        const actionResponse = await fetchEndpoint(publicKeyCredential, actionUrl, actionHeader);\n        if (! actionResponse.ok) {\n            throw actionResponse;\n        }\n        const responseBody = await actionResponse.text();\n\n        return responseBody !== '' ? JSON.parse(responseBody) : responseBody;\n    };\n};\n\nexport default useRegistration;\n","// import { Formik, Form as FormikForm } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport * as tenantFunctions from \"../../classes/Tenant\";\nimport Header from \"../../components/Header\";\nimport Breadcrumb from \"../../components/Breadcrumb\";\nimport { Alert, Button, Card, ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useRegistration } from \"@web-auth/webauthn-helper\";\nimport Form from \"../../components/form/Form\";\nimport TextInput from \"../../components/form/TextInput\";\nimport * as yup from \"yup\";\n\nconst WebAuthn = () => {\n\n  const [error, setError] = useState(null);\n  const [username, setUsername] = useState(null);\n  const [authenticators, setAuthenticators] = useState([]);\n  // const [showNewForm, setShowNewForm] = useState(false);\n\n  useEffect(() => {\n    tenantFunctions.setTitle(\"Web Authentication\");\n  }, []);\n\n  const getAuthenticators = async () => {\n    const { data } = await axios.get(\"/api/my-account/webauthn/authenticators\");\n    setAuthenticators(data.authenticators);\n    setUsername(data.username);\n  };\n\n  useEffect(() => {\n    (async () => {\n      await getAuthenticators();\n    })();\n  }, []);\n\n  const register = useRegistration({\n    actionUrl: \"/api/my-account/webauthn/register\",\n    optionsUrl: \"/api/my-account/webauthn/challenge\",\n  });\n\n  // const login = useLogin({\n  //   actionUrl: \"/api/my-account/webauthn/auth-verify\",\n  //   optionsUrl: \"/api/my-account/webauthn/auth-challenge\",\n  // });\n\n  const handleRegister = async (ev, formikBag) => {\n    try {\n      await register({\n        username: username,\n        passkey_name: ev.name,\n      });\n      formikBag.resetForm();\n      setError(null);\n      await getAuthenticators();\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  // const handleLogin = async () => {\n  //   try {\n  //     const response = await login({\n  //       username: username,\n  //     });\n  //     console.log(response);\n  //     setError(null);\n  //   } catch (error) {\n  //     setError(error.message);\n  //     console.log(\"OOPS\", error);\n  //   }\n  // };\n\n  const deleteAuthenticator = async (id) => {\n    const response = await axios.post(\"/api/my-account/webauthn/delete\", {\n      id\n    });\n\n    if (response.data.success) {\n      // Successfully deleted\n      getAuthenticators();\n    } else {\n      // Oops\n      setError(response.data.message);\n    }\n  };\n\n  const renderAuthenticators = authenticators.map(item => {\n    return (\n      <ListGroupItem key={item.id}>\n        <div className=\"row align-items-center\">\n          <div className=\"col\">\n            <p className=\"mb-0 fw-bold\">{item.name || \"Unnamed\"}</p>\n            <p className=\"mb-0\">Created at {item.created_at}</p>\n          </div>\n          <div className=\"col-auto\">\n            <Button variant=\"secondary\" onClick={() => deleteAuthenticator(item.id)}>Delete</Button>\n          </div>\n        </div>\n      </ListGroupItem>\n    );\n  });\n\n  const crumbs = [\n    {\n      to: \"/my-account\",\n      title: \"My Account\",\n      name: \"My Account\",\n    },\n    {\n      to: \"/my-account/passkeys\",\n      title: \"Manage your passkeys\",\n      name: \"Passkeys\",\n    },\n  ];\n\n  return (\n    <>\n      <Header breadcrumbs={<Breadcrumb crumbs={crumbs} />} title=\"Manage passkeys\" subtitle=\"Passwordless login for your club account\" />\n\n      <div className=\"container-xl\">\n        <div className=\"row\">\n          <div className=\"col-lg-8\">\n\n            {typeof (PublicKeyCredential) === \"undefined\" &&\n              <>\n                <Alert variant=\"warning\">\n                  We&apos;re sorry. Your web browser does not support the Web Authentication standard required to use passkeys. You&apos;ll need to keep using password based authentication for now.\n                </Alert>\n              </>\n            }\n\n            {typeof (PublicKeyCredential) !== \"undefined\" &&\n              <>\n                {error &&\n                  <Alert variant=\"danger\" className=\"mb-3\">\n                    {error}\n                  </Alert>\n                }\n\n                <Card className=\"mb-3\">\n                  <Card.Header>\n                    Add a new passkey\n                  </Card.Header>\n                  <Card.Body>\n                    <Form\n                      initialValues={{\n                        name: \"\",\n                      }}\n                      validationSchema={yup.object({\n                        name: yup.string()\n                          .required(\"Please name your passkey so that you can identify the device it is used with\"),\n                      })}\n                      onSubmit={handleRegister}\n                      hideClear\n                      submitTitle=\"Add passkey\"\n                    >\n                      <TextInput name=\"name\" label=\"Passkey name\" />\n                    </Form>\n                  </Card.Body>\n                </Card>\n\n                {\n                  authenticators.length > 0 &&\n                  (<Card className=\"mb-3\">\n                    <Card.Header>\n                      Current passkeys\n                    </Card.Header>\n                    <ListGroup variant=\"flush\">\n                      {renderAuthenticators}\n                    </ListGroup>\n                  </Card>)\n                }\n\n                {/* {(username && authenticators.length > 0) &&\n                  <p>\n                    <Button onClick={handleLogin}>Test Login</Button>\n                  </p>\n                } */}\n              </>\n            }\n\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n};\n\nexport default WebAuthn;"],"names":["getKey","key","store","getName","getDetail","getId","getUuid","getCode","setTitle","title","document","props","crumbs","length","breadcrumbs","map","crumb","resolved","useResolvedPath","to","useMatch","path","pathname","end","className","name","state","global_questionable_link","SubmissionButtons","isSubmitting","dirty","isValid","errors","handleReset","useFormikContext","hideClear","variant","type","onClick","onClear","disabled","clearTitle","submitTitle","initialValues","validationSchema","onSubmit","hideButtons","otherProps","children","label","helpText","mb","field","meta","useField","marginBotton","controlId","id","touched","error","isInvalid","fetchEndpoint","data","url","header","fetch","method","credentials","redirect","headers","body","JSON","stringify","base64UrlDecode","input","pad","replace","Error","Array","join","window","atob","arrayToBase64String","a","btoa","String","fromCharCode","setError","useState","username","setUsername","authenticators","setAuthenticators","useEffect","tenantFunctions","getAuthenticators","async","axios","register","actionUrl","actionHeader","optionsUrl","optionsHeader","optionsResponse","publicKey","challenge","Uint8Array","from","c","charCodeAt","undefined","user","excludeCredentials","allowCredentials","preparePublicKeyOptions","json","publicKeyCredential","rawId","response","clientDataJSON","attestationObject","authenticatorData","signature","userHandle","preparePublicKeyCredentials","navigator","create","actionResponse","ok","responseBody","text","parse","useRegistration","renderAuthenticators","item","ListGroupItem","created_at","Button","success","message","deleteAuthenticator","Header","Breadcrumb","subtitle","PublicKeyCredential","Alert","Card","Form","yup","required","ev","formikBag","passkey_name","resetForm","TextInput","ListGroup"],"sourceRoot":""}
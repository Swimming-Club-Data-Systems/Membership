{"version":3,"file":"js/431.00e09233af4a00c4d092.js","mappings":"gSAIO,SAASA,EAAOC,GAErB,OADcC,EAAAA,EAAAA,WACD,4BAA4BD,GAGpC,SAASE,IACd,OAAOC,EAAU,QAGZ,SAASC,IACd,OAAOD,EAAU,MAGZ,SAASE,IACd,OAAOF,EAAU,QAWZ,SAASG,IACd,OAAOH,EAAU,qBAOZ,SAASI,EAAWC,GACzB,OAAOL,EAAU,kBAAoBK,EAGvC,SAASL,EAAUH,GAEjB,OADcC,EAAAA,EAAAA,WACD,oBAAoBD,GAG5B,SAASS,EAASC,GACvBC,SAASD,MAAQA,EAAQ,MAAQX,EAAO,e,qJCpC1C,MAAMa,EAASC,EAAAA,KAAaC,MAAM,CAChCC,aAAcF,EAAAA,KAAaG,MAAM,oCAAoCC,SAAS,uCAoHhF,WAAeC,EAAAA,EAAAA,IAAQC,EAAAA,EAAiBC,EAAAA,GAAxC,EAjHqBC,KAEnBC,EAAAA,EAAAA,YAAU,KACRC,EAAAA,GAAyB,8BACzBF,EAAMG,QAAQ,mBACb,IAEH,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,OAC5BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GA+BvC,OAEE,gCACGC,GACC,gCACE,gBAAC,IAAD,CAAOE,QAAQ,WACb,qBAAGC,UAAU,QACX,2DAEF,qBAAGA,UAAU,QAAb,yFAOJH,GACA,gCAEIH,GACA,uBAAKM,UAAU,sBAAsBN,EAAMO,SAG7C,gBAAC,KAAD,CACEC,iBAAkBrB,EAClBsB,SAtDOC,MAAOC,EAAP,KAAqC,IAAtB,cAAEC,GAAoB,EACpDA,GAAc,GAEd,IAEE,MAAMC,QAAiBC,IAAAA,KAAW,mCAAoC,CACpEC,cAAeJ,EAAOrB,eAGpBuB,EAASG,KAAKb,QAChBC,GAAW,GAGXH,EAAS,CACPgB,KAAM,SACNV,QAASM,EAASG,KAAKT,UAI3B,MAAOP,GACPC,EAAS,CACPgB,KAAM,SACNV,QAASP,EAAMO,UAInBK,GAAc,IA6BNM,cAAe,CACb5B,aAAcM,EAAMN,cAAgB,GACpC6B,SAAU,GACVC,WAAYxB,EAAMwB,aAAc,KAGjC,QAAC,aACAC,EADA,aAEAC,EAFA,WAGAC,EAHA,OAIAZ,EAJA,QAKAa,EALA,QAMAC,EANA,OAOAC,EAPA,aAQAC,EARA,MASAC,GATD,SAWC,gBAAC,IAAD,CAAMC,YAAU,EAACpB,SAAUY,EAAcS,OAAQP,GAC/C,uBAAKjB,UAAU,QACb,gBAAC,UAAD,CAAYyB,UAAU,gBACpB,gBAAC,UAAD,sBACA,gBAAC,YAAD,CACEd,KAAK,QACLe,KAAK,eACLC,MAAOtB,EAAOrB,aACd4C,SAAUZ,EACVG,QAASD,EAAQlC,eAAiBoC,EAAOpC,aACzC6C,UAAWX,EAAQlC,cAAgBoC,EAAOpC,aAC1C8C,KAAK,OAENV,EAAOpC,cACN,gBAAC,qBAAD,CAAuB2B,KAAK,WAAWS,EAAOpC,gBAKpD,qBAAGgB,UAAU,QACX,gBAAC,IAAD,CAAQ8B,KAAK,KAAKnB,KAAK,SAASoB,UAAWT,IAAUH,GAAWE,GAAhE","sources":["webpack://src/./js/classes/Tenant.js","webpack://src/./js/login/FindAccount.js"],"sourcesContent":["// import reducer from \"../reducers/index\";\n// import { getState } from 'redux';\nimport store from \"../reducers/store\";\n\nexport function getKey(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/GlobalSettings\"][key];\n}\n\nexport function getName() {\n  return getDetail(\"name\");\n}\n\nexport function getId() {\n  return getDetail(\"id\");\n}\n\nexport function getUuid() {\n  return getDetail(\"uuid\");\n}\n\nexport function getWebsite() {\n  return getDetail(\"website\");\n}\n\nexport function getHostname() {\n  return getDetail(\"hostname\");\n}\n\nexport function getCode() {\n  return getDetail(\"swim_england_code\");\n}\n\nexport function isVerified() {\n  return getDetail(\"is_verified\");\n}\n\nexport function getLogoUrl(filename) {\n  return getDetail(\"club_logo_path\") + filename;\n}\n\nfunction getDetail(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/Tenant\"][key];\n}\n\nexport function setTitle(title) {\n  document.title = title + \" - \" + getKey(\"club_name\");\n}","\nimport React, { useEffect, useState } from \"react\";\nimport * as tenantFunctions from \"../classes/Tenant\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Alert, Form } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"../reducers/Login\";\nimport axios from \"axios\";\n\nconst schema = yup.object().shape({\n  emailAddress: yup.string().email(\"Your email address must be valid\").required(\"You must provide an email address\"),\n});\n\nconst FindAccount = (props) => {\n\n  useEffect(() => {\n    tenantFunctions.setTitle(\"Get back into your account\");\n    props.setType(\"resetPassword\");\n  }, []);\n\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n\n  const onSubmit = async (values, { setSubmitting }) => {\n    setSubmitting(true);\n\n    try {\n\n      const response = await axios.post(\"/api/auth/request-password-reset\", {\n        email_address: values.emailAddress,\n      });\n\n      if (response.data.success) {\n        setSuccess(true);\n      } else {\n        // There was an error\n        setError({\n          type: \"danger\",\n          message: response.data.message,\n        });\n      }\n\n    } catch (error) {\n      setError({\n        type: \"danger\",\n        message: error.message,\n      });\n    }\n\n    setSubmitting(false);\n  };\n\n  return (\n\n    <>\n      {success &&\n        <>\n          <Alert variant=\"success\">\n            <p className=\"mb-0\">\n              <strong>We&apos;ve found your account</strong>\n            </p>\n            <p className=\"mb-0\">\n              We&apos;re sending you an email with instructions detailing how to reset your password.\n            </p>\n          </Alert>\n        </>\n      }\n\n      {!success &&\n        <>\n          {\n            error &&\n            <div className=\"alert alert-danger\">{error.message}</div>\n          }\n\n          <Formik\n            validationSchema={schema}\n            onSubmit={onSubmit}\n            initialValues={{\n              emailAddress: props.emailAddress || \"\",\n              password: \"\",\n              rememberMe: props.rememberMe || true,\n            }}\n          >\n            {({\n              handleSubmit,\n              handleChange,\n              handleBlur,\n              values,\n              touched,\n              isValid,\n              errors,\n              isSubmitting,\n              dirty,\n            }) => (\n              <Form noValidate onSubmit={handleSubmit} onBlur={handleBlur}>\n                <div className=\"mb-3\">\n                  <Form.Group controlId=\"emailAddress\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control\n                      type=\"email\"\n                      name=\"emailAddress\"\n                      value={values.emailAddress}\n                      onChange={handleChange}\n                      isValid={touched.emailAddress && !errors.emailAddress}\n                      isInvalid={touched.emailAddress && errors.emailAddress}\n                      size=\"lg\"\n                    />\n                    {errors.emailAddress &&\n                      <Form.Control.Feedback type=\"invalid\">{errors.emailAddress}</Form.Control.Feedback>\n                    }\n                  </Form.Group>\n                </div>\n\n                <p className=\"mb-5\">\n                  <Button size=\"lg\" type=\"submit\" disabled={!dirty || !isValid || isSubmitting}>Reset password</Button>\n                </p>\n              </Form>\n            )}\n          </Formik>\n        </>\n      }\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindAccount);"],"names":["getKey","key","store","getName","getDetail","getId","getUuid","getCode","getLogoUrl","filename","setTitle","title","document","schema","yup","shape","emailAddress","email","required","connect","mapStateToProps","mapDispatchToProps","props","useEffect","tenantFunctions","setType","error","setError","useState","success","setSuccess","variant","className","message","validationSchema","onSubmit","async","values","setSubmitting","response","axios","email_address","data","type","initialValues","password","rememberMe","handleSubmit","handleChange","handleBlur","touched","isValid","errors","isSubmitting","dirty","noValidate","onBlur","controlId","name","value","onChange","isInvalid","size","disabled"],"sourceRoot":""}
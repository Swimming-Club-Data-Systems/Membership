{"version":3,"file":"js/298.f97deff61a7623eb987d.js","mappings":"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","sources":["webpack://src/./js/classes/Tenant.js","webpack://src/./js/components/Loader.js","webpack://src/./js/login/ResetPassword.js","webpack://src/./js/classes/Passwords.js"],"sourcesContent":["// import reducer from \"../reducers/index\";\n// import { getState } from 'redux';\nimport store from \"../reducers/store\";\n\nexport function getKey(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/GlobalSettings\"][key];\n}\n\nexport function getName() {\n  return getDetail(\"name\");\n}\n\nexport function getId() {\n  return getDetail(\"id\");\n}\n\nexport function getUuid() {\n  return getDetail(\"uuid\");\n}\n\nexport function getWebsite() {\n  return getDetail(\"website\");\n}\n\nexport function getHostname() {\n  return getDetail(\"hostname\");\n}\n\nexport function getCode() {\n  return getDetail(\"swim_england_code\");\n}\n\nexport function isVerified() {\n  return getDetail(\"is_verified\");\n}\n\nexport function getLogoUrl(filename) {\n  return getDetail(\"club_logo_path\") + filename;\n}\n\nfunction getDetail(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/Tenant\"][key];\n}\n\nexport function setTitle(title) {\n  document.title = title + \" - \" + getKey(\"club_name\");\n}","import React from \"react\";\nimport Placeholder from \"react-bootstrap/Placeholder\";\n\nconst Loader = (props) => {\n\n  return (\n    <>\n      {\n        !props.loaded && (\n          <>\n            <Placeholder xs={6} animation=\"glow\" />\n            <Placeholder className=\"w-75\" animation=\"glow\" /> <Placeholder className=\"w-25\" animation=\"glow\" />\n          </>\n        )\n      }\n      {\n        props.loaded && props.children\n      }\n    </>\n  );\n};\n\nexport default Loader;","\nimport React, { useEffect, useState } from \"react\";\nimport * as tenantFunctions from \"../classes/Tenant\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Alert, Form } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"../reducers/Login\";\nimport axios from \"axios\";\nimport { isPwned } from \"../classes/Passwords\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport Loader from \"../components/Loader\";\n\nconst schema = yup.object().shape({\n  password: yup.string().required(\"You must provide a password\").min(8, \"Your password must be at least 8 characters\").matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}/, \"Your password must contain at least one lower case letter, one upper case letter and one number\").test(\n    \"is-pwned\",\n    \"Your password is insecure\",\n    async (value) => await isPwned(value),\n  ),\n  confirmPassword: yup.string().required(\"You must confirm your password\").oneOf([yup.ref(\"password\"), null], \"Passwords do not match\"),\n});\n\nconst ResetPassword = (props) => {\n\n  const [error, setError] = useState(null);\n  const [isValid, setIsValid] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const getData = async () => {\n      tenantFunctions.setTitle(\"Get back into your account\");\n      props.setType(\"resetPassword\");\n\n      // Check token\n      const response = await axios.post(\"/api/auth/can-password-reset\", {\n        token: searchParams.get(\"auth-code\"),\n      });\n      setIsValid(response.data.success);\n\n      setLoaded(true);\n\n    };\n\n    getData();\n\n  }, []);\n\n  const onSubmit = async (values, { setSubmitting }) => {\n    setSubmitting(true);\n\n    try {\n\n      const response = await axios.post(\"/api/auth/complete-password-reset\", {\n        token: searchParams.get(\"auth-code\"),\n        password: values.password,\n      });\n\n      if (response.data.success) {\n        // Redirect to login with state\n        navigate(\"/login\", {\n          state: {\n            successfulReset: true,\n          }\n        });\n      } else {\n        // There was an error\n        setError({\n          type: \"danger\",\n          message: response.data.message,\n        });\n      }\n\n    } catch (error) {\n      setError({\n        type: \"danger\",\n        message: error.message,\n      });\n    }\n\n    setSubmitting(false);\n  };\n\n  return (\n\n    <Loader loaded={loaded}>\n\n      {!isValid &&\n        <>\n          <Alert variant=\"danger\">\n            <p className=\"mb-0\"><strong>We couldn&apos;t find a matching password reset request</strong></p>\n            <p className=\"mb-0\">Please try checking the link in the password reset email we sent you. Reset links expire after two days.</p>\n          </Alert>\n        </>\n      }\n\n      {isValid &&\n        <>\n          {\n            error &&\n            <div className=\"alert alert-danger\">{error.message}</div>\n          }\n\n          <Formik\n            validationSchema={schema}\n            onSubmit={onSubmit}\n            initialValues={{\n              password: \"\",\n              confirmPassword: \"\",\n            }}\n          >\n            {({\n              handleSubmit,\n              handleChange,\n              handleBlur,\n              values,\n              touched,\n              isValid,\n              errors,\n              isSubmitting,\n              dirty,\n            }) => (\n              <Form noValidate onSubmit={handleSubmit} onBlur={handleBlur}>\n                <div className=\"mb-3\">\n                  <Form.Group controlId=\"password\">\n                    <Form.Label>New password</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      name=\"password\"\n                      value={values.password}\n                      onChange={handleChange}\n                      isValid={touched.password && !errors.password}\n                      isInvalid={touched.password && errors.password}\n                      size=\"lg\"\n                      autoComplete=\"new-password\"\n                    />\n                    {errors.password &&\n                      <Form.Control.Feedback type=\"invalid\">{errors.password}</Form.Control.Feedback>\n                    }\n                  </Form.Group>\n                </div>\n\n                <div className=\"mb-3\">\n                  <Form.Group controlId=\"confirmPassword\">\n                    <Form.Label>Confirm password</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      name=\"confirmPassword\"\n                      value={values.confirmPassword}\n                      onChange={handleChange}\n                      isValid={touched.confirmPassword && !errors.confirmPassword}\n                      isInvalid={touched.confirmPassword && errors.confirmPassword}\n                      size=\"lg\"\n                      autoComplete=\"new-password\"\n                    />\n                    {errors.confirmPassword &&\n                      <Form.Control.Feedback type=\"invalid\">{errors.confirmPassword}</Form.Control.Feedback>\n                    }\n                  </Form.Group>\n                </div>\n\n                <p className=\"mb-5\">\n                  <Button size=\"lg\" type=\"submit\" disabled={!dirty || !isValid || isSubmitting}>Change password</Button>\n                </p>\n              </Form>\n            )}\n          </Formik>\n        </>\n      }\n\n    </Loader>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPassword);","import axios from \"axios\";\n\nexport const isPwned = async (password) => {\n  try {\n    const result = await axios.post(\"/api/utilities/pwned-password-check\", {\n      password: password,\n    });\n\n    return !result.data.pwned;\n  } catch (error) {\n    return true;\n  }\n};"],"names":["getKey","key","store","getName","getDetail","getId","getUuid","getCode","getLogoUrl","filename","setTitle","title","document","props","loaded","Placeholder","xs","animation","className","children","schema","yup","shape","password","required","min","matches","test","async","axios","data","pwned","error","isPwned","value","confirmPassword","oneOf","connect","mapStateToProps","mapDispatchToProps","setError","useState","isValid","setIsValid","setLoaded","searchParams","useSearchParams","navigate","useNavigate","useEffect","tenantFunctions","setType","response","token","get","success","getData","Alert","variant","message","validationSchema","onSubmit","values","setSubmitting","state","successfulReset","type","initialValues","handleSubmit","handleChange","handleBlur","touched","errors","isSubmitting","dirty","Form","noValidate","onBlur","controlId","name","onChange","isInvalid","size","autoComplete","Button","disabled"],"sourceRoot":""}
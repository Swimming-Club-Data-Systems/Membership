{"version":3,"file":"js/136.b2dacb203feb6ccbcb1e.js","mappings":"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","sources":["webpack://src/./js/classes/Tenant.js","webpack://src/./js/login/Login.js","webpack://src/./js/login/useLogin.js","webpack://src/./js/login/TwoFactor.js","webpack://src/./js/login/LoginPage.js"],"sourcesContent":["// import reducer from \"../reducers/index\";\n// import { getState } from 'redux';\nimport store from \"../reducers/store\";\n\nexport function getKey(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/GlobalSettings\"][key];\n}\n\nexport function getName() {\n  return getDetail(\"name\");\n}\n\nexport function getId() {\n  return getDetail(\"id\");\n}\n\nexport function getUuid() {\n  return getDetail(\"uuid\");\n}\n\nexport function getWebsite() {\n  return getDetail(\"website\");\n}\n\nexport function getHostname() {\n  return getDetail(\"hostname\");\n}\n\nexport function getCode() {\n  return getDetail(\"swim_england_code\");\n}\n\nexport function isVerified() {\n  return getDetail(\"is_verified\");\n}\n\nexport function getLogoUrl(filename) {\n  return getDetail(\"club_logo_path\") + filename;\n}\n\nfunction getDetail(key) {\n  const state = store.getState();\n  return state[\"SKIPCLEAR/Tenant\"][key];\n}\n\nexport function setTitle(title) {\n  document.title = title + \" - \" + getKey(\"club_name\");\n}","\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as tenantFunctions from \"../classes/Tenant\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Form } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { Alert } from \"react-bootstrap\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"../reducers/Login\";\nimport axios from \"axios\";\n// import { useLogin } from \"@web-auth/webauthn-helper\";\nimport useLogin from \"./useLogin\";\nimport { Collapse } from \"bootstrap\";\n\nconst schema = yup.object().shape({\n  emailAddress: yup.string().email(\"Your email address must be valid\").required(\"You must provide an email address\"),\n  password: yup.string().required(\"You must provide a password\"),\n  rememberMe: yup.bool(),\n});\n\nconst Login = (props) => {\n\n  const supportsWebauthn = typeof (PublicKeyCredential) !== \"undefined\";\n\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    tenantFunctions.setTitle(\"Login\");\n    if (location.state && location.state.location) {\n      props.setLoginDetails({\n        target: location.state.location.pathname,\n      });\n    }\n  }, []);\n\n  const [error, setError] = useState(null);\n  const [username, setUsername] = useState(\"\");\n  const [hasWebauthn, setHasWebauthn] = useState(false);\n  const [ssoUrl, setSsoUrl] = useState(null);\n  const [selectedTraditional, setSelectedTraditional] = useState(null);\n  const collapsePasskeyRef = useRef();\n  const [collapsePasskey, setCollapsePasskey] = useState(null);\n  const collapsePasswordRef = useRef();\n  const [collapsePassword, setCollapsePassword] = useState(null);\n  const collapseSsoRef = useRef();\n  const [collapseSso, setCollapseSso] = useState(null);\n\n  const webAuthnError = {\n    type: \"danger\",\n    message: \"Passkey authentication failed.\",\n  };\n\n  const show = (field) => {\n    if (field === \"passkey\") {\n      collapsePasskey.show();\n    } else {\n      collapsePasskey.hide();\n    }\n\n    if (field === \"sso\") {\n      collapseSso.show();\n    } else {\n      collapseSso.hide();\n    }\n\n    if (field === \"password\") {\n      collapsePassword.show();\n    } else {\n      collapsePassword.hide();\n    }\n  };\n\n  useEffect(() => {\n    setCollapsePasskey(new Collapse(collapsePasskeyRef.current, { toggle: false }));\n    setCollapsePassword(new Collapse(collapsePasswordRef.current, { toggle: false }));\n    setCollapseSso(new Collapse(collapseSsoRef.current, { toggle: false }));\n  }, []);\n\n  useEffect(() => {\n    if (selectedTraditional !== null) {\n      show(selectedTraditional ? \"password\" : \"passkey\");\n    }\n  }, [selectedTraditional]);\n\n  const checkWebauthn = async (value = null) => {\n    if (!supportsWebauthn) {\n      // Not supported in browser so do not show\n      return false;\n    }\n\n    // Check for tokens first!\n    const { data } = await axios.get(\"/api/auth/login/has-webauthn\", {\n      params: {\n        email: value || username,\n      }\n    });\n\n    setHasWebauthn(data.has_webauthn);\n    if (data.is_sso) {\n      setSsoUrl(data.sso_url);\n      show(\"sso\");\n    } else {\n      setSsoUrl(null);\n      show(data.has_webauthn ? \"passkey\" : \"password\");\n    }\n\n    return data.has_webauthn;\n  };\n\n  const login = useLogin({\n    actionUrl: \"/api/auth/login/webauthn-verify\",\n    optionsUrl: \"/api/auth/login/webauthn-challenge\",\n  });\n\n  const handleLogin = async (event, autoFill = false) => {\n    try {\n      const requestObject = {\n        target: location?.state?.location?.pathname,\n      };\n\n      if (username) {\n        requestObject.username = username;\n        const hasTokens = await checkWebauthn();\n        if (!hasTokens) {\n          setError({ variant: \"warning\", message: \"There are no passkeys registered for this account.\" });\n          return;\n        }\n      }\n\n      if (autoFill) {\n        requestObject.credentialsGetProps = {\n          mediation: \"conditional\"\n        };\n      }\n\n      const response = await login(requestObject);\n      if (response.success) {\n        window.location.replace(response.redirect_url);\n        setError(null);\n      } else {\n        setError(webAuthnError);\n        console.error(error);\n      }\n    } catch (error) {\n      setError(webAuthnError);\n      console.error(error);\n    }\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const handleAutofillLogin = async () => {\n    // eslint-disable-next-line no-undef\n    if (!PublicKeyCredential.isConditionalMediationAvailable ||\n      // eslint-disable-next-line no-undef\n      !PublicKeyCredential.isConditionalMediationAvailable()) {\n      // Browser doesn't support AutoFill-assisted requests.\n      return;\n    }\n\n    await handleLogin(null, true);\n  };\n\n  useEffect(() => {\n    (async () => {\n      await handleAutofillLogin();\n    })();\n  }, []);\n\n  const onSubmit = async (values, { setSubmitting }) => {\n    setSubmitting(true);\n\n    try {\n\n      const response = await axios.post(\"/api/auth/login/login\", {\n        email_address: values.emailAddress,\n        password: values.password,\n      });\n\n      if (response.data.success) {\n        props.setType(\"twoFactor\");\n        props.setLoginDetails({\n          ...response.data,\n          remember_me: values.rememberMe\n        });\n      } else {\n        // There was an error\n        setError({\n          type: \"danger\",\n          message: response.data.message,\n        });\n      }\n\n    } catch (error) {\n      setError({\n        type: \"danger\",\n        message: error.message,\n      });\n    }\n\n    setSubmitting(false);\n  };\n\n  const renderSwitchModeButton = () => {\n    return (\n      <Button variant=\"secondary\" type=\"button\" onClick={() => setSelectedTraditional(!selectedTraditional)} disabled={false}>\n        {selectedTraditional ? \"Use a passkey to login\" : \"Use a password to login\"}\n      </Button>\n    );\n  };\n\n  return (\n\n    <>\n\n      {\n        error &&\n        <div className=\"alert alert-danger\">{error.message}</div>\n      }\n\n      {\n        location.state && location.state.successfulReset &&\n        <Alert variant=\"success\">\n          <p className=\"mb-0\">\n            <strong>Your password was reset successfully</strong>\n          </p>\n        </Alert>\n      }\n\n      <Formik\n        validationSchema={schema}\n        onSubmit={onSubmit}\n        initialValues={{\n          emailAddress: props.emailAddress || searchParams.get(\"email\") || \"\",\n          password: \"\",\n          rememberMe: props.rememberMe || true,\n        }}\n      >\n        {({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          touched,\n          isValid,\n          errors,\n          isSubmitting,\n          dirty,\n        }) => {\n          const showTraditional = (!hasWebauthn && touched.emailAddress && !errors.emailAddress) || selectedTraditional;\n          return (\n            <Form noValidate onSubmit={handleSubmit} onBlur={handleBlur}>\n              <div className=\"mb-3\">\n                <Form.Group controlId=\"emailAddress\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"emailAddress\"\n                    value={values.emailAddress}\n                    onChange={async (e) => { handleChange(e); setUsername(e.target.value); await checkWebauthn(e.target.value); }}\n                    isValid={touched.emailAddress && !errors.emailAddress}\n                    isInvalid={touched.emailAddress && errors.emailAddress}\n                    size=\"lg\"\n                    autoComplete=\"username webauthn\"\n                  />\n                  {errors.emailAddress &&\n                    <Form.Control.Feedback type=\"invalid\">{errors.emailAddress}</Form.Control.Feedback>\n                  }\n                </Form.Group>\n              </div>\n\n              <div className=\"collapse\" ref={collapseSsoRef}>\n                <div className=\"mb-5\">\n                  <Button href={ssoUrl} size=\"lg\" type=\"button\">Login</Button>\n                </div>\n              </div>\n\n              <div className=\"collapse\" ref={collapsePasskeyRef}>\n                {\n                  // (supportsWebauthn && !showTraditional && hasWebauthn) &&\n                  <div className=\"mb-5\">\n\n                    <div className=\"row justify-content-between align-items-center\">\n                      <div className=\"col-sm-auto\">\n                        <Button size=\"lg\" type=\"button\" onClick={handleLogin} disabled={false}>Login with passkey</Button>\n                        <div className=\"mb-2 d-sm-none\"></div>\n                      </div>\n\n                      <div className=\"col-sm-auto\">\n                        {renderSwitchModeButton()}\n                      </div>\n                    </div>\n\n                  </div>\n                }\n              </div>\n\n              <div className=\"collapse\" ref={collapsePasswordRef}>\n                <div className=\"mb-3\">\n                  <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      name=\"password\"\n                      value={values.password}\n                      onChange={handleChange}\n                      isValid={touched.password && !errors.password}\n                      isInvalid={touched.password && errors.password}\n                      size=\"lg\"\n                      autoComplete=\"current-password\"\n                    />\n                    {errors.password &&\n                      <Form.Control.Feedback type=\"invalid\">{errors.password}</Form.Control.Feedback>\n                    }\n                  </Form.Group>\n                </div>\n\n                <Form.Group className=\"mb-3\">\n                  <Form.Check\n                    name=\"rememberMe\"\n                    label=\"Keep me logged in\"\n                    onChange={handleChange}\n                    checked={values.rememberMe}\n                    isInvalid={!!errors.rememberMe}\n                    feedback={errors.rememberMe}\n                    feedbackType=\"invalid\"\n                    id=\"rememberMe\"\n                  />\n                </Form.Group>\n\n                {\n                  showTraditional &&\n                  <div className=\"mb-5\">\n                    <div className=\"row justify-content-between align-items-center\">\n                      <div className=\"col-sm-auto\">\n                        <Button size=\"lg\" type=\"submit\" disabled={!dirty || !isValid || isSubmitting}>Login</Button>\n                        <div className=\"mb-2 d-sm-none\"></div>\n                      </div>\n\n                      <div className=\"col-sm-auto\">\n                        {renderSwitchModeButton()}\n                      </div>\n                    </div>\n                  </div>\n                }\n              </div>\n\n              <div className=\"mb-5\">\n                <p>\n                  New member? Your club will create an account for you and send you a link to get started.\n                </p>\n                <span>\n                  <Link to=\"/login/forgot-password\" className=\"btn btn-dark\">\n                    Forgot password?\n                  </Link>\n                </span>\n              </div>\n            </Form>\n          );\n        }\n        }\n      </Formik>\n\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import {\n  fetchEndpoint,\n  preparePublicKeyCredentials,\n  preparePublicKeyOptions,\n} from \"@web-auth/webauthn-helper/src/common\";\n\nconst useLogin = ({ actionUrl = \"/login\", actionHeader = {}, optionsUrl = \"/login/options\" }, optionsHeader = {}) => {\n  // eslint-disable-next-line no-unused-vars\n  return async ({credentialsGetProps, ...data}) => {\n    const optionsResponse = await fetchEndpoint(data, optionsUrl, optionsHeader);\n    const json = await optionsResponse.json();\n    const publicKey = preparePublicKeyOptions(json);\n    const credentials = await navigator.credentials.get({\n      publicKey,\n      ...credentialsGetProps\n    });\n    const publicKeyCredential = preparePublicKeyCredentials(credentials);\n    const actionResponse = await fetchEndpoint(publicKeyCredential, actionUrl, actionHeader);\n    if (!actionResponse.ok) {\n      throw actionResponse;\n    }\n    const responseBody = await actionResponse.text();\n\n    return responseBody !== \"\" ? JSON.parse(responseBody) : responseBody;\n  };\n};\n\nexport default useLogin;\n","\nimport React, { useState } from \"react\";\nimport * as tenantFunctions from \"../classes/Tenant\";\nimport { Formik, useFormikContext } from \"formik\";\nimport * as yup from \"yup\";\nimport { Alert, Form } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"../reducers/Login\";\nimport axios from \"axios\";\n\nconst schema = yup.object().shape({\n  authCode: yup.string().length(6, \"Authentication codes are 6 digits\").required(\"You must enter an authentication code\").matches(/[0-9]{6,6}/, \"Authentication codes are 6 digits\"),\n  setUpTwoFactor: yup.bool(),\n});\n\nconst AutoSubmitToken = () => {\n  // Grab values and submitForm from context\n  const { values, submitForm } = useFormikContext();\n  React.useEffect(() => {\n    // Submit the form imperatively as an effect as soon as form values.authCode are 6 digits long\n    if (values.authCode.length === 6) {\n      submitForm();\n    }\n  }, [values, submitForm]);\n  return null;\n};\n\nconst TwoFactor = (props) => {\n\n  const [enableResend, setEnableResend] = useState(true);\n  const [resent, setResent] = useState(false);\n  const [error, setError] = useState({\n    show: false,\n    message: null,\n  });\n\n  const handleResend = async () => {\n    setEnableResend(false);\n\n    // Make API request\n    const response = await axios.post(\"/api/auth/login/resend-two-factor\", {\n    });\n\n    if (response.data.success) {\n      setResent(true);\n      props.setLoginDetail(\"two_factor_method\", \"email\");\n    } else {\n      // Show error\n      setError({\n        show: true,\n        message: response.data.message,\n      });\n    }\n\n    new Promise(function () {\n      setTimeout(function () {\n        setEnableResend(true);\n      }, 5000);\n    });\n  };\n\n  const onSubmit = async (values, { setSubmitting }) => {\n    setSubmitting(true);\n\n    try {\n      const response = await axios.post(\"/api/auth/login/two-factor\", {\n        auth_code: values.authCode,\n        target: props.target,\n        setup_two_factor: values.setUpTwoFactor,\n        remember_me: props.remember_me || false,\n      });\n\n      if (response.data.success) {\n        // Redirect for cookies\n        setError({\n          show: false,\n          message: null,\n        });\n        window.location.replace(response.data.redirect_url);\n      } else {\n        // Oops\n        setSubmitting(false);\n        setError({\n          show: true,\n          message: response.data.message,\n        });\n      }\n    } catch (error) {\n      setError({\n        show: true,\n        message: \"A network error occurred\",\n      });\n      setSubmitting(false);\n    }\n  };\n\n  tenantFunctions.setTitle(\"Confirm Login\");\n\n  let helpString = \"We've sent a confirmation code to your registered email address\";\n  let helpResendString = \"Resend email\";\n  if (props.two_factor_method === \"totp\") {\n    helpString = \"Use the code from your Two Factor Authentication app to confirm your sign in\";\n    helpResendString = \"Resend email\";\n  }\n\n  return (\n\n    <>\n\n      {error.show && (\n        <Alert variant=\"danger\">\n          <p className=\"mb-0\">\n            <strong>Oops</strong>\n          </p>\n          <p className=\"mb-0\">\n            {error.message}\n          </p>\n        </Alert>\n      )}\n\n      <Formik\n        validationSchema={schema}\n        onSubmit={onSubmit}\n        initialValues={{\n          authCode: \"\",\n          setUpTwoFactor: false,\n        }}\n      >\n        {({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          touched,\n          isValid,\n          errors,\n          isSubmitting,\n          dirty,\n        }) => (\n          <Form noValidate onSubmit={handleSubmit} onBlur={handleBlur}>\n            <div className=\"mb-3\">\n              <Form.Group controlId=\"password\">\n                <Form.Label>Authentication code</Form.Label>\n                <Form.Control\n                  name=\"authCode\"\n                  autoFocus\n                  value={values.authCode}\n                  onChange={handleChange}\n                  isValid={touched.authCode && !errors.authCode}\n                  isInvalid={touched.authCode && errors.authCode}\n                  size=\"lg\"\n                  placeholder=\"654321\"\n                  pattern=\"[0-9]*\"\n                  inputMode=\"numeric\"\n                  autoComplete=\"one-time-code\"\n                />\n                {errors.authCode &&\n                  <Form.Control.Feedback type=\"invalid\">{errors.authCode}</Form.Control.Feedback>\n                }\n              </Form.Group>\n            </div>\n\n            {!props.has_totp &&\n              <Form.Group className=\"mb-3\">\n                <Form.Check\n                  name=\"setUpTwoFactor\"\n                  label=\"Set up an authenticator app\"\n                  onChange={handleChange}\n                  isInvalid={!!errors.setUpTwoFactor}\n                  feedback={errors.setUpTwoFactor}\n                  id=\"setUpTwoFactor\"\n                  checked={values.setUpTwoFactor}\n                />\n              </Form.Group>\n            }\n\n            <p className=\"mb-5\">\n              <Button size=\"lg\" type=\"submit\" disabled={!dirty || !isValid || isSubmitting}>Confirm login</Button>\n            </p>\n\n            <div className=\"mb-5\">\n              <p>\n                {helpString}\n              </p>\n              <span>\n                <Button\n                  variant=\"dark\"\n                  onClick={handleResend}\n                  disabled={!enableResend}\n                >\n                  {helpResendString}\n                </Button>\n                {\n                  resent &&\n                  <Alert variant=\"info\" className=\"mt-2\">\n                    We&apos;ve resent your authentication code.\n                  </Alert>\n                }\n              </span>\n            </div>\n\n            <AutoSubmitToken />\n          </Form>\n        )}\n      </Formik>\n\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TwoFactor);","\nimport React, { useEffect } from \"react\";\nimport * as tenantFunctions from \"../classes/Tenant\";\nimport Login from \"./Login\";\nimport TwoFactor from \"./TwoFactor\";\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"../reducers/Login\";\n\nconst LoginPage = (props) => {\n\n  useEffect(() => {\n    props.setType(\"login\");\n\n    tenantFunctions.setTitle(\"Login\");\n\n    return () => {\n      // props.dispatch\n    };\n  }, []);\n\n  return (\n\n    <>\n\n      {props.login_page_type === \"login\" &&\n        <Login />\n      }\n\n      {props.login_page_type === \"twoFactor\" &&\n        <TwoFactor />\n      }\n\n    </>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);"],"names":["getKey","key","store","getName","getDetail","getId","getUuid","getCode","getLogoUrl","filename","setTitle","title","document","schema","yup","shape","emailAddress","email","required","password","rememberMe","connect","mapStateToProps","mapDispatchToProps","props","supportsWebauthn","PublicKeyCredential","location","useLocation","searchParams","useSearchParams","useEffect","tenantFunctions","state","setLoginDetails","target","pathname","error","setError","useState","username","setUsername","hasWebauthn","setHasWebauthn","ssoUrl","setSsoUrl","selectedTraditional","setSelectedTraditional","collapsePasskeyRef","useRef","collapsePasskey","setCollapsePasskey","collapsePasswordRef","collapsePassword","setCollapsePassword","collapseSsoRef","collapseSso","setCollapseSso","webAuthnError","type","message","show","field","hide","Collapse","current","toggle","checkWebauthn","async","value","data","axios","params","has_webauthn","is_sso","sso_url","login","actionUrl","actionHeader","optionsUrl","optionsHeader","credentialsGetProps","optionsResponse","fetchEndpoint","json","publicKey","preparePublicKeyOptions","credentials","navigator","get","publicKeyCredential","preparePublicKeyCredentials","actionResponse","ok","responseBody","text","JSON","parse","useLogin","handleLogin","event","autoFill","requestObject","variant","mediation","response","success","window","replace","redirect_url","console","isConditionalMediationAvailable","handleAutofillLogin","renderSwitchModeButton","Button","onClick","disabled","className","successfulReset","Alert","validationSchema","onSubmit","values","setSubmitting","email_address","setType","remember_me","initialValues","handleSubmit","handleChange","handleBlur","touched","isValid","errors","isSubmitting","dirty","showTraditional","Form","noValidate","onBlur","controlId","name","onChange","e","isInvalid","size","autoComplete","ref","href","label","checked","feedback","feedbackType","id","to","authCode","length","matches","setUpTwoFactor","AutoSubmitToken","submitForm","useFormikContext","React","enableResend","setEnableResend","resent","setResent","handleResend","setLoginDetail","Promise","setTimeout","helpString","helpResendString","two_factor_method","auth_code","setup_two_factor","autoFocus","placeholder","pattern","inputMode","has_totp","login_page_type"],"sourceRoot":""}
const path = require('path');
const fs = require('fs');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');

const compileTime = Date.now();

var CASHBUSTER_FILE = './cachebuster.json';


// Function that extracts unique hash generated by webpack
// and writes it into a file. It also performs a check
// whether cachebuster.json existed before and if so,
// replaces the hash value. Otherwise writes a new file.
function generateResourcesHash(hash) {
  if (!fs.existsSync(CASHBUSTER_FILE)) {
    fs.openSync(CASHBUSTER_FILE, 'w');
    fs.writeFileSync(
      path.join(__dirname, "", CASHBUSTER_FILE),
      "{}"
    );
  }

  var cacheBuster = JSON.parse(fs.readFileSync(path.join(__dirname, CASHBUSTER_FILE), 'utf8'));

  cacheBuster.resourcesHash = hash

  fs.writeFileSync(
    path.join(__dirname, "", CASHBUSTER_FILE),
    JSON.stringify(cacheBuster)
  );
}

generateResourcesHash(compileTime);

module.exports = (env, options) => {
  var inProduction = options.mode === 'production';

  return {
    mode: options.mode,
    devtool: 'source-map',
    entry: [
      './js/javascript.js',
      './scss/clse.scss',
      './scss/generic.scss',
      './scss/scds.scss'
    ],
    output: {
      path: path.resolve(__dirname, 'public/compiled/'),
      filename: 'js/main.' + compileTime + '.js'
    },
    module: {
      rules: [
        {
          test: /\.(scss)$/,
          use: [{
            loader: 'file-loader',
            options: {
              outputPath: 'css/',
              name: '[name].' + compileTime + '.min.css'
            }
          }, {
            loader: 'postcss-loader', // Run postcss actions
            options: {
              plugins: function () { // postcss plugins, can be exported to postcss.config.js
                return [
                  require('autoprefixer')
                ];
              },
              sourceMap: true
            }
          }, {
            loader: 'sass-loader', // compiles Sass to CSS
            options: {
              sourceMap: true
            }
          }]
        },
      ],
    },
    plugins: [
      new CleanWebpackPlugin(),
    ]
  };
};